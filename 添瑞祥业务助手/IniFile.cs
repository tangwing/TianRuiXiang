//*************************************************************************************************
// DEBUT DU FICHIER
//*************************************************************************************************

//*************************************************************************************************
// Nom           : IniFile.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation des objets du namespace System.IO
// Environnement : Visual Studio 2008
// Framework     : 2.0
// Compilateur   : 2.0.50727.3615
// Créé le       : --/--/----
// Modifié le    : --/--/----
//*************************************************************************************************

//-------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;
//-------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------

//*************************************************************************************************
// Début du bloc "System.IO"
//*************************************************************************************************
namespace System.IO
{

    //  #  #   #  #  #####  #  #      #####
    //  #  ##  #  #  #      #  #      #    
    //  #  # # #  #  ###    #  #      ###  
    //  #  #  ##  #  #      #  #      #    
    //  #  #   #  #  #      #  #####  #####

    //*********************************************************************************************
    // Classe IniFile
    //*********************************************************************************************
    /// <summary>
    /// Collection de procédures permettant l'accès aux paramètres contenus dans un fichier Ini.
    /// </summary>
    //---------------------------------------------------------------------------------------------
    public static class IniFile
    {
        //-----------------------------------------------------------------------------------------
        // Expression Régulière qui se charge de détecter n'importe quelle section
        //-----------------------------------------------------------------------------------------
        private static Regex RegIsSection = new Regex("^\\[.*\\]");
        //-----------------------------------------------------------------------------------------

        //*****************************************************************************************
        // Prototype   : private static bool Throws ( string FileName, string Name, 
        //                                                                   bool CheckFileExists )
        // Description : Génère les exceptions de base
        //*****************************************************************************************
        /// <summary>
        /// Génère les exceptions de base.
        /// </summary>
        /// <param name="FileName">Nom et chemin du fichier ini.</param>
        /// <param name="Name">Nom du paramètre à lire.</param>
        /// <param name="CheckFileExists">Indique s'il faut tester l'existance du fichier.</param>
        /// <returns><b>True</b> si el fichier existe, sinon <b>False</b>.</returns>
        /// <exception cref="ArgumentException">Le nom du fichier ne peut être vide.</exception>
        /// <exception cref="FileNotFoundException">Le Fichier est introuvable.</exception>
        /// <exception cref="ArgumentException">Le nom de la valeur ne peut être vide.</exception>
        //*****************************************************************************************
        private static bool Throws(string FileName, string Name, bool CheckFileExists)
        {
            //-------------------------------------------------------------------------------------
            // Le nom du fichier doit être spécifié
            //-------------------------------------------------------------------------------------
            if (string.IsNullOrEmpty(FileName))
                throw new ArgumentException("Le nom du fichier ne peut être vide.");
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Le fichier n'existe pas
            //-------------------------------------------------------------------------------------
            bool FileExists = File.Exists(FileName);

            if (CheckFileExists && !FileExists)
                throw new FileNotFoundException("Le Fichier est introuvable.");
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Le nom du fichier doit être spécifié
            //-------------------------------------------------------------------------------------
            if (string.IsNullOrEmpty(Name))
                throw new ArgumentException("Le nom de la valeur ne peut être vide.");
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            return FileExists;
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        // Prototype   : private static string NormalizeToRegEx ( string Value )
        // Description : Remplace tous les caractères d'échappements par des caractères valides 
        //               dans une expression régulière
        //*****************************************************************************************
        /// <summary>
        /// Remplace tous les caractères d'échappements par des caractères valides dans une 
        /// expression régulière.
        /// </summary>
        /// <param name="Value">Chaine à traiter.</param>
        /// <returns>CHaine convertie.</returns>
        //-----------------------------------------------------------------------------------------
        private static string NormalizeToRegEx(string Value)
        {
            //-------------------------------------------------------------------------------------
            if (Value == null) return "";

            return Value.Replace("\\", "\\\\").Replace("^", "\\^").
                         Replace(".", "\\.").Replace("$", "\\$").
                         Replace("|", "\\|").Replace("(", "\\)").
                         Replace(")", "\\)").Replace("-", "\\-").
                         Replace("[", "\\[").Replace("]", "\\]").
                         Replace("+", "\\+").Replace("?", "\\?").
                         Replace("*", "\\*").Replace("{", "\\{").
                         Replace("}", "\\}");
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        // Prototype   : public static void GetString ( string FileName, string Section, 
        //                                                          string Name, ref string Value )
        // Description : Récupère la valeur de type String d'un paramètre
        //*****************************************************************************************
        /// <summary>
        /// Récupère la valeur de type <b>String</b> d'un paramètre.
        /// </summary>
        /// <param name="FileName">Nom et chemin du fichier ini.</param>
        /// <param name="Section">Nom de la section contenant le paramètre à lire.</param>
        /// <param name="Name">Nom du paramètre à lire.</param>
        /// <param name="Value">Contiendra la valeur si trouvée.</param>
        /// <returns><b>True</b> indique que la valeur a été trouvée, sinon <b>False</b>.</returns>
        /// <exception cref="ArgumentException">Le nom du fichier ne peut être vide.</exception>
        /// <exception cref="FileNotFoundException">Le Fichier est introuvable.</exception>
        /// <exception cref="ArgumentException">Le nom de la valeur ne peut être vide.</exception>
        //-----------------------------------------------------------------------------------------
        public static bool GetString(string FileName, string Section, string Name,
                                                                                 ref string Value)
        {
            //-------------------------------------------------------------------------------------
            // Contrôle des champs et du fichier
            //-------------------------------------------------------------------------------------
            IniFile.Throws(FileName, Name, true);
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // On convertit le chaines au bon format
            //-------------------------------------------------------------------------------------
            Section = IniFile.NormalizeToRegEx(Section);
            Name = IniFile.NormalizeToRegEx(Name);
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            bool Finded = false;
            Regex RegGoodSection, RegOtherSection, RegValue;
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Expressions Régulières qui se charge de détecter les sections
            //-------------------------------------------------------------------------------------
            try
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Expression Régulière qui se charge de détecter la bonne section
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                RegGoodSection = new Regex("^\\[" + Section + "\\]", RegexOptions.IgnoreCase);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Expression Régulière qui se charge de détecter une autre section
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                RegOtherSection = new Regex("^\\[.*[^(" + Section + ")].*\\]",
                                                                         RegexOptions.IgnoreCase);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
            catch { throw new FormatException("Le format de Section est invalide."); }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Expression Régulière utilisé pour détecter le nom de la valeur
            //-------------------------------------------------------------------------------------
            try
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                RegValue = new Regex("^" + Name + "=", RegexOptions.IgnoreCase);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
            catch { throw new FormatException("Le format de Name est invalide."); }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Ouverture du fichier
            //-------------------------------------------------------------------------------------
            using (StreamReader Sr = File.OpenText(FileName))
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Déclaration des variables nécessaires
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                string Line;
                bool SectionSpecified = !string.IsNullOrEmpty(Section);
                bool SectionFinded = !SectionSpecified;
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Parcours du fichier
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                while ((Line = Sr.ReadLine()) != null)
                {
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    // Inutile de travailler sur les lignes vides
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    if (Line.Length > 0)
                    {
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        // On ne traite pas les lignes en commentaires
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        if (!Line.StartsWith(";"))
                        {
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            // Si on est en mode Out-Section, on n'est plus valide si on en 
                            // trouve une
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            if (!SectionSpecified && RegIsSection.IsMatch(Line))
                                return false;
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            // On est en mode In-Section
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            if (SectionSpecified)
                            {
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                // On a trouvé notre Section
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                if (RegGoodSection.IsMatch(Line))
                                {
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    SectionFinded = true;

                                    continue;
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                }
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                // On a trouvé une autre Section
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                else if (RegOtherSection.IsMatch(Line))
                                {
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    SectionFinded = false;

                                    continue;
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                }
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            }
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            // On a trouvé notre valeur
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            if (SectionFinded && RegValue.IsMatch(Line))
                            {
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Value = RegValue.Replace(Line, "").Trim();
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                // Si la chaine commence et termine par '"', on les supprimes
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                if (Value.StartsWith("\"") && Value.EndsWith("\""))
                                    Value = Value.Substring(1, Value.Length - 2);
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Finded = true;
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            }
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        }
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    }
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // A t'on trouvé la valeur ?
            //-------------------------------------------------------------------------------------
            return Finded;
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        // Prototype   : public static void GetInteger ( string FileName, string Section, 
        //                                                            string Name, ref long Value )
        // Description : Récupère la valeur de type int d'un paramètre
        //*****************************************************************************************
        /// <summary>
        /// Récupère la valeur de type <b>int</b> d'un paramètre.
        /// </summary>
        /// <param name="FileName">Nom et chemin du fichier ini.</param>
        /// <param name="Section">Nom de la section contenant le paramètre à lire.</param>
        /// <param name="Name">Nom du paramètre à lire.</param>
        /// <param name="Value">Contiendra la valeur si trouvée.</param>
        /// <returns><b>True</b> indique que la valeur a été trouvée, sinon <b>False</b>.</returns>
        /// <exception cref="ArgumentException">Le nom du fichier ne peut être vide.</exception>
        /// <exception cref="FileNotFoundException">Le Fichier est introuvable.</exception>
        /// <exception cref="ArgumentException">Le nom de la valeur ne peut être vide.</exception>
        /// <exception cref="FormatException">
        /// La valeur du paramètre n'est pas un entier valide.
        /// </exception>
        //-----------------------------------------------------------------------------------------
        public static bool GetInteger(string FileName, string Section, string Name,
                                                                                   ref long Value)
        {
            //-------------------------------------------------------------------------------------
            // Utilisons ce qui est déjà disponible
            //-------------------------------------------------------------------------------------
            string StrValue = Value.ToString();

            bool Finded = IniFile.GetString(FileName, Section, Name, ref StrValue);
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            try
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Tentons de convertir la valeur en entier
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Value = Int64.Parse(StrValue);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
            // S'il y a une exception, c'est probablement que la valeur n'est pas un entier
            //-------------------------------------------------------------------------------------
            catch { throw new FormatException("La valeur n'est pas un entier valide !"); }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // A t'on trouvé la valeur ?
            //-------------------------------------------------------------------------------------
            return Finded;
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        // Prototype   : public static void Write ( string FileName, string Section, string Name, 
        //                                                                           object Value )
        // Description : Ecrit la valeur d'un paramètre dans le fichier ini
        //*****************************************************************************************
        /// <summary>
        /// Ecrit la valeur d'un paramètre dans le fichier ini.
        /// </summary>
        /// <param name="FileName">Nom et chemin du fichier ini.</param>
        /// <param name="Section">Nom de la section contenant le paramètre à lire.</param>
        /// <param name="Name">Nom du paramètre à lire.</param>
        /// <param name="Value">Valeur à écrire, <b>null</b> permet de la supprimer.</param>
        /// <exception cref="ArgumentException">Le nom du fichier ne peut être vide.</exception>
        /// <exception cref="FileNotFoundException">Le Fichier est introuvable.</exception>
        /// <exception cref="ArgumentException">Le nom de la valeur ne peut être vide.</exception>
        /// <exception cref="IOException">Le fichier n'est pas accessible.</exception>
        //*****************************************************************************************
        public static void Write(string FileName, string Section, string Name, object Value)
        {
            //-------------------------------------------------------------------------------------
            // Contrôle des champs et du fichier
            //-------------------------------------------------------------------------------------
            bool FileExists = IniFile.Throws(FileName, Name, false);
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // On convertit le chaines au bon format
            //-------------------------------------------------------------------------------------
            Section = IniFile.NormalizeToRegEx(Section);
            Name = IniFile.NormalizeToRegEx(Name);
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            Regex RegGoodSection, RegOtherSection, RegValue;
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Expressions Régulières qui se charge de détecter les sections
            //-------------------------------------------------------------------------------------
            try
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Expression Régulière qui se charge de détecter la bonne section
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                RegGoodSection = new Regex("^\\[" + Section + "\\]", RegexOptions.IgnoreCase);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Expression Régulière qui se charge de détecter une autre section
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                RegOtherSection = new Regex("^\\[.*[^(" + Section + ")].*\\]",
                                                                         RegexOptions.IgnoreCase);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
            catch { throw new FormatException("Le format de Section est invalide."); }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Expression Régulière utilisé pour détecter le nom de la valeur
            //-------------------------------------------------------------------------------------
            try
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                RegValue = new Regex("^" + Name + "=", RegexOptions.IgnoreCase);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
            catch { throw new FormatException("Le format de Name est invalide."); }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // On convertit l'objet en chaine, et on ajoute les '"' si c'est bien une chaine
            //-------------------------------------------------------------------------------------
            string WritedValue = (Value == null) ? null : (Value is string) ?
                                                   "\"" + (string)Value + "\"" : Value.ToString();
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Le fichier n'existe pas
            //-------------------------------------------------------------------------------------
            if (!FileExists)
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                using (StreamWriter Sw = File.CreateText(FileName))
                {
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    // On écrit la section si on est en mode In-Section
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    if (!string.IsNullOrEmpty(Section))
                        Sw.WriteLine("[" + Section + "]");
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    // On écrit notre valeur
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    Sw.WriteLine(Name + "=" + WritedValue);
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                return;
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            string TempFileName = Path.GetTempFileName();
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            // Ouverture du fichier en lecture
            //-------------------------------------------------------------------------------------
            using (StreamReader Sr = File.OpenText(FileName))
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // Création du fichier temporaire
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                using (StreamWriter Sw = File.CreateText(TempFileName))
                {
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    string Line;
                    bool SectionSpecified = !string.IsNullOrEmpty(Section);
                    bool SectionFinded = !SectionSpecified;
                    bool ValueWrited = false;
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    while ((Line = Sr.ReadLine()) != null && ValueWrited==false)
                    {
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        // Inutile de travailler sur les lignes vides
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        if (Line.Length > 0)
                        {
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            // Aucun traitement sur les lignes en commentaires
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            if (!Line.StartsWith(";"))
                            {
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                // Si on est en mode Out-Section, on n'est plus valide si on en 
                                // trouve une
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                if (!SectionSpecified && RegIsSection.IsMatch(Line))
                                {
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // Si on arrive là, c'est qu'il faut ajouter la valeur
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    if (WritedValue != null && !ValueWrited)
                                        Sw.WriteLine(Name + "=" + WritedValue);
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    ValueWrited = true;
                                    SectionFinded = false;
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                }
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                // On est en mode In-Section
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                else if (SectionSpecified)
                                {
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // On a trouvé notre Section
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    if (RegGoodSection.IsMatch(Line))
                                    {
                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        SectionFinded = true;
                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    }
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // On a trouvé une autre Section
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    else if (RegOtherSection.IsMatch(Line))
                                    {
                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        // Si on arrive là, c'est qu'il faut ajouter la valeur
                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        if (SectionFinded && !ValueWrited)
                                        {
                                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                            if (WritedValue != null)
                                                Sw.WriteLine(Name + "=" + WritedValue);

                                            ValueWrited = false;
                                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        }
                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        SectionFinded = true;
                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    }
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                }
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                // On a trouvé notre valeur
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                if (SectionFinded && RegValue.IsMatch(Line))
                                {
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // La valeur a déjà été traitée, donc on supprime
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    if (ValueWrited) Line = null;
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // La valeur doit être supprimée
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    else if (WritedValue == null) Line = null;
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // On écrit la valeur
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    else { Line = Name + "=" + WritedValue; }
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    // On indique que la valeur a été traitée
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    ValueWrited = true;
                                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                }
                                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            }
                            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        }
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        // On écrit la ligne
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        if (Line != null) Sw.WriteLine(Line);
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    }
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    // On est à la fin du fichier et on a pas traité notre valeur
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    if (!ValueWrited)
                    {
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        // On a pas trouvé la sectio alors qu'elle est spécifiée
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        if (!SectionFinded && SectionSpecified)
                            Sw.WriteLine("[" + Section + "]");
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        // On écrit notre valeur
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        Sw.WriteLine(Name + "=" + WritedValue);
                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    }
                    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            try
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // On remplace l'ancien fichier avec le fichier temporaire
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                File.Copy(TempFileName, FileName, true);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // On supprime le fichier temporaire
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                File.Delete(TempFileName);
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
            catch
            {
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                // On a probablement pas le droit de toucher au fichier ini
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                throw new IOException("Le fichier n'est pas accessible.");
                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************
    }
    //*********************************************************************************************

} // Fin du namespace "System.IO"
//*************************************************************************************************

//*************************************************************************************************
// FIN DU FICHIER
//*************************************************************************************************
